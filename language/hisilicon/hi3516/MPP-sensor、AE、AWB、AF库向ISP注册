1、简介
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
海思提供的媒体处理软件平台(Media Process Platform,简称MPP)，可支持应用软件快速开发。
该平台对应用软件屏蔽了芯片相关的复杂的底层处理，并对应用软件直接提供MPI(MPP Programe Interface)接口完成相应功能。该平台支持应用软件快速开发以下功能：输入视频捕获、H.265/H.264/MJPEG/JPEG/MPEG4
编码、H264/VC1/MPEG4/MPEG2/AVS解码、视频输出显示、视频图像前处理(包括去噪、增强、锐化、Deinterlace)、
编码码流叠加OSD、视频侦测分析、智能分析、音频捕获及输出、音频编解码等功能。

2、MPP的主要构成
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
海思媒体处理平台主要构件有：视频输入(VI)、视频处理(VPSS)、视频编码(VENC)、视频解码(VDEC)、
视频输出(VO)、视频侦测分析(VDA)、音频输入(AI)、音频输出(AO)、音频编码(AENC)、音频解码(ADEC)、
区域管理(REGION)等模块。

3、MPI与ISP
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
在《HiMPP IPC V2.0 媒体处理软件开发参考》文档中几乎没有提及ISP的内容，但《HiISP开发参考》
和《Hi3516A/Hi3516D_ISP_3A开发指南》所涉及的ISP的API名都表明这些API是MPI的一部分，譬如
HI_MPI_ISP_MemInit。

4、ISP：sensor库、3A算法库、ISP FIREWARE三者关系
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
ISP FIREWARE完全由海思提供；3A算法库海思提供了一套，用户也可以自己设计，一般还是使用海
思提供的；sensor库当然是使用哪种sensor就选择哪种库。

由于ISP FIREWARE要使用3A算法库和sensor库来工作，而3A算法库和sensor库又可能有多套，这
就需要被使用的3A算法库和sensor库主动向ISP FIREWARE注册自己。事实上，sensor库还需要向
3A算法库注册自己。所以，其实ISP FIREWARE调用了3A算法库，3A算法库又调用了sensor库从而控
制sensor工作。

以上提到的注册工作是通过ISP FIREWARE和3A算法库提供的回调函数实现的。ISP FIREWARE向3A
算法库和sensor库提供了回调函数；3A算法库向sensor库提供了回调函数。下面具体来看：

HI_MPI_ISP_AeLibRegCallBack、HI_MPI_ISP_AwbLibRegCallBack、HI_MPI_ISP_AfLibRegCallBack
这三个接口是ISP firmware库提供的钩子函数，用于开发3A算法库时实现注册动作。例如海思提供
的3A算法库的HI_MPI_AE_Register、HI_MPI_AWB_Register、HI_MPI_AF_Register接口，在实现
时调用了相应的钩子函数，所以调用HI_MPI_AE_Register能实现AE算法库向ISP firmware库注册。

同样的，海思3A算法库同样也提供了钩子函数，用于Sensor库实现向3A算法库注册的动作。例如
HI_MPI_AE_SensorRegCallBack、HI_MPI_AWB_SensorRegCallBack、HI_MPI_AF_SensorRegCallBack，
在xxx_cmos.c中可以看到调用了这些钩子函数的函数sensor_register_callback。用户在开发3A算法库时，
也可以通过提供钩子函数的方式，实现Sensor库向3A算法库的注册。

当然，ISP firmware库也提供了钩子函数，用于Sensor库实现向ISP firmware库注册的动作。例如
HI_MPI_ISP_SensorRegCallBack，在xxx_cmos.c中可以看到调用了该钩子函数的函数
sensor_register_callback。

5、MPP提供的库
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
首先我们需要明确：windows下即使是使用动态库dll，编译时使用的也是静态库lib，但此时的lib
里边是没有函数定义的，只有声明，所以这个lib很小。而linux使用动态库就用动态库链接，使用
静态库就使用静态库链接，与windows是有些区别的。另外，如果动态库与静态库同时存在于一个文
件夹下gcc链接时优先使用动态库，除非使用--static选项强制使用静态库。

我们查看sdk**/mpp/lib目录可以发现：mpp提供的大部分软件模块都既提供了动态库又提供了静态库
我们可以自由选择。

6、HI_S32 HI_MPI_ISP_SensorRegCallBack函数
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
用于sensor向ISP FIREWARE注册回调函数。

HI_S32 HI_MPI_ISP_SensorRegCallBack(ISP_DEV IspDev, SENSOR_ID SensorId,
ISP_SENSOR_REGISTER_S *pstRegister);

对“ISP设备号”，《Hi3516A/Hi3516D与Hi3518 ISP MPI 差异》是这样解释的：Hi3516A MPI 接口
增加了ISP设备号IspDev，以方便将来扩展支持多个ISP设备，目前该值固定为0。

ISP_SENSOR_REGISTER_S就是我们要注册的函数指针结构体。

实例：
                                                      ->  cmos_init_sensor_exp_function
                                                      ->  HI_MPI_ISP_SensorRegCallBack
SAMPLE_COMM_ISP_Init()  ->  sensor_register_callback
   (V3516A.cpp)                (imx178_cmos.c)
                                                      ->  cmos_init_ae_exp_function
                                                      ->  HI_MPI_AE_SensorRegCallBack
                                                      ->  cmos_init_awb_exp_function
                                                      ->  HI_MPI_AWB_SensorRegCallBack

ISP_SENSOR_EXP_FUNC_S的成员：
pfn_cmos_sensor_init          初始化sensor 的回调函数指针。
pfn_cmos_sensor_exit          退出sensor 的回调函数指针。
pfn_cmos_sensor_global_init   初始化全局变量的回调函数指针。
pfn_cmos_set_image_mode       设置图像模式的回调函数指针。
pfn_cmos_set_wdr_mode         设置wdr 模式和线性模式切换的回调函数指针。
pfn_cmos_get_isp_default      获取ISP 基础算法的初始值的回调函数指针。
pfn_cmos_get_isp_black_level  获取sensor 的黑电平值的回调函数指针。
pfn_cmos_set_pixel_detect     设置坏点校正开关的回调函数指针。
pfn_cmos_get_sns_reg_info     设置sensor 曝光与增益延时的回调函数指针。


AE_SENSOR_EXP_FUNC_S的成员：
pfn_cmos_get_ae_default      获取AE 算法库的初始值的回调函数指针。
pfn_cmos_fps_set             设置sensor 的帧率。
pfn_cmos_slow_framerate_set  设置sensor 的降帧。
pfn_cmos_inttime_update      设置sensor 的曝光时间。
pfn_cmos_gains_update        设置sensor 的模拟增益和数字增益。
pfn_cmos_again_calc_table    计算TABLE 类型sensor 模拟增益。
pfn_cmos_dgain_calc_table    计算TABLE 类型sensor 数字增益。
pfn_cmos_get_inttime_max     帧合成WDR 模式下，获取长、短帧不同曝光倍数时所允许的短曝光时间最大值，与sensor强相关。


pfn_cmos_get_sns_reg_info 调用参数ISP_SNS_REGS_INFO_S 支持I2C 和SPI接口

