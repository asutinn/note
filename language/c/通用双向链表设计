
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
通用双向链表一般采用宏定义的方法进行：定义一个链表头，定义一个pre、next两个成员的匿名结
构体，然后再定义若干宏用于遍历链表，删除链表元素等等工作。

这里边有一个难点，实际使用时，匿名结构体一般是作为用于定义的结构体的一个部分使用，而操作
链表的宏都是使用的这个匿名结构体，这就需要有一些技术来“通过结构体变量一个成员的指针来获
取结构体变量的指针”。


其实这个需求不但在设计“通用双向链表”时有，其它地方也有这样的需求，linux内核里就有大量这
样的需求，那它是怎么实现的呢？
/*
 * 选自 linux-2.6.7 内核源码
 * filename: linux-2.6.7/include/linux/stddef.h
 */
#define offsetof(TYPE, MEMBER) ((size_t) &((TYPE *)0)->MEMBER)

多么神奇的设计！！！

知道成员偏移量了，那么求结构体对象本身的地址不就易如反掌了吗，成员的地址减去偏移量不就
是结构体对象的首地址了吗，基于这个思路，我们再看看伟大的 Linux 是怎样实现的：

/*
 * 选自 linux-2.6.7 内核源码
 * filename: linux-2.6.7/include/linux/stddef.h
 */
#define container_of(ptr, type, member) ({			\
        const typeof( ((type *)0)->member ) *__mptr = (ptr);	\
        (type *)( (char *)__mptr - offsetof(type,member) );})

这个设计简洁明了，挺好的。

不过libevent中的双向链表的设计并没有采用这样的策略。