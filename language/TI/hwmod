sdk/arch/arm/match-omap2/omap_hwmod.c中有对hwmod概念的介绍：
hwmod针对的是OMAP片内模块而不是外设，譬如我们的DMA系统。

aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	可以采用这样一种视角来看待OMAP片上系统：它是一些互相连接在一起的IP模块的大集合。而
这个IP模块包括如ARM处理器的设备、音频串行接口、UART等等。这些设备中的一些，比如像DSP，是
由TI自己创建，其他的一些设备是由其他大厂家的制造商来提供的（如SGX）。在TI的架构中，TI把
芯片上的片内设备称为“OMAP 模块”。其中有一些IP模块跨越多个OMAP版本都不会改变，而有一些则
频繁地被修订。

	这些OMAP模块是由不同的互连器连接在一起。模块之间大部分的地址和数据流是通过基于OCP(
一种片内模块资源通信协议)的互连(如L3和L4总线)连接在一起。也有其它一些内部互联(interconnects),
譬如interconnects that distribute the hardware clock tree, handle idle and reset 
signaling, supply power, and connect the modules to various pads or balls on the 
OMAP package.

aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	OMAP hwmod提供一种统一的方式来描述芯片硬件模块并将其融入到芯片的其余部分。此描述可
以自动从TI硬件数据库生成。 OMAP hwmod提供了一套标准的，一致的API如复位、使能、睡眠、禁止
这些硬件模块。Hwmod也提供了一种方法用于其他核心代码，如Linux设备代码、OMAP电源管理或地
址空间映射代码来查询硬件数据库。

（mach-omap2/omap_hwmod_33xx_data.c这个文件有详细的解释）

Using hwmod
 * -----------
 * Drivers won't call hwmod functions directly.  That is done by the
 * omap_device code, and in rare occasions, by custom integration code
 * in arch/arm/ *omap*.  The omap_device code includes functions to
 * build a struct platform_device using omap_hwmod data, and that is
 * currently how hwmod data is communicated to drivers and to the
 * Linux driver model.  Most drivers will call omap_hwmod functions only
 * indirectly, via pm_runtime*() functions.
 *
 * From a layering perspective, here is where the OMAP hwmod code
 * fits into the kernel software stack:
 *
 *            +-------------------------------+
 *            |      Device driver code       |
 *            |      (e.g., drivers/)         |
 *            +-------------------------------+
 *            |      Linux driver model       |
 *            |     (platform_device /        |
 *            |  platform_driver data/code)   |
 *            +-------------------------------+
 *            | OMAP core-driver integration  |
 *            |(arch/arm/mach-omap2/devices.c)|
 *            +-------------------------------+
 *            |      omap_device code         |
 *            | (../plat-omap/omap_device.c)  |
 *            +-------------------------------+
 *   ---->    |    omap_hwmod code/data       |    <-----
 *            | (../mach-omap2/omap_hwmod*)   |
 *            +-------------------------------+
 *            | OMAP clock/PRCM/register fns  |
 *            | (__raw_{read,write}l, clk*)   |
 *            +-------------------------------+
 *
 * Device drivers should not contain any OMAP-specific code or data in
 * them.  They should only contain code to operate the IP block that
 * the driver is responsible for.  This is because these IP blocks can
 * also appear in other SoCs, either from TI (such as DaVinci) or from
 * other manufacturers; and drivers should be reusable across other
 * platforms.
 *
 * The OMAP hwmod code also will attempt to reset and idle all on-chip
 * devices upon boot.  The goal here is for the kernel to be
 * completely self-reliant and independent from bootloaders.  This is
 * to ensure a repeatable configuration, both to ensure consistent
 * runtime behavior, and to make it easier for others to reproduce
 * bugs.
 *
 * OMAP module activity states
 * ---------------------------
 * The hwmod code considers modules to be in one of several activity
 * states.  IP blocks start out in an UNKNOWN state, then once they
 * are registered via the hwmod code, proceed to the REGISTERED state.
 * Once their clock names are resolved to clock pointers, the module
 * enters the CLKS_INITED state; and finally, once the module has been
 * reset and the integration registers programmed, the INITIALIZED state
 * is entered.  The hwmod code will then place the module into either
 * the IDLE state to save power, or in the case of a critical system
 * module, the ENABLED state.
 *
 * OMAP core integration code can then call omap_hwmod*() functions
 * directly to move the module between the IDLE, ENABLED, and DISABLED
 * states, as needed.  This is done during both the PM idle loop, and
 * in the OMAP core integration code's implementation of the PM runtime
 * functions.
 *
 * References
 * ----------
 * This is a partial list.
 * - OMAP2420 Multimedia Processor Silicon Revision 2.1.1, 2.2 (SWPU064)
 * - OMAP2430 Multimedia Device POP Silicon Revision 2.1 (SWPU090)
 * - OMAP34xx Multimedia Device Silicon Revision 3.1 (SWPU108)
 * - OMAP4430 Multimedia Device Silicon Revision 1.0 (SWPU140)
 * - Open Core Protocol Specification 2.2
 *
 * To do:
 * - handle IO mapping
 * - bus throughput & module latency measurement code
 *
 * XXX add tests at the beginning of each function to ensure the hwmod is
 * in the appropriate state
 * XXX error return values should be checked to ensure that they are
 * appropriate
 */


ti把片内IP资源都用struct omap_hwmod来描述。这些IP包括：L3、L4、mpu、iva、wd_timer、uart、i2c、sr、gpio、dma等。

omap_hwmod_3xxx_data.c定义了：
	int __init omap3xxx_hwmod_init(void)

sdk\arch\arm\plat-omap\include\plat\omap_hwmod.h外部引用了：
	extern int omap3xxx_hwmod_init(void);

sdk\arch\arm\mach-omap2\io.c的omap2_init_common_infrastructure调用了
	omap3xxx_hwmod_init()

各板子譬如board-omap3evm.c调用了omap2_init_common_infrastructure
