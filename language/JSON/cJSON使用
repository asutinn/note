1、JSON介绍：
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
1.1、json引用
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa




2、cjson内存函数(malloc/free/realloc)
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	cjson的内存策略global_hooks默认使用malloc/free/realloc，如果要使用自己的内
存管理方案，需在使用cjson之前调用cJSON_InitHooks函数配置。

	cJSON_InitHooks函数设置的是内部变量global_hooks，外部程序通过下面两个函数调用
global_hooks的函数指针：
	CJSON_PUBLIC(void *) cJSON_malloc(size_t size);
	CJSON_PUBLIC(void) cJSON_free(void *object);

C++程序员注意与
	CJSON_PUBLIC(void) cJSON_Delete(cJSON *c);
相区分。cJSON_Delete删除的是cJSON树，会遍历或递归操作。


3、cjson内存管理
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	cJSON的内存管理策略是：由调用者负责释放内存：

	cJSON_Parse返回的cJSON对象通过cJSON_Delete（会删除所有子元素）释放；
	cJSON_Print返回的字符串通过cJSON_Free释放；


4、cjson拷贝
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	CJSON_PUBLIC(cJSON *) cJSON_Duplicate(const cJSON *item, cJSON_bool recurse);

	函数返回的对象(拷贝目标)的next、prev指针都是NULL，当recurse为true时，child不
为NULL；当recurse为false时，child也不拷贝，只拷贝 valuestring、valueint、
valuedouble、string、type。（所以，但item是个object的时候，非递归拷贝会只有type是
64，其它参数都是空）。感觉上recurese为false没什么意义。

5、元素类型
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
#define cJSON_False  (1 << 0)                           false
#define cJSON_True   (1 << 1)                           true
#define cJSON_NULL   (1 << 2)                           null
#define cJSON_Number (1 << 3)                           数值
#define cJSON_String (1 << 4)                           字符串
#define cJSON_Array  (1 << 5)                           数组
#define cJSON_Object (1 << 6)                           对象
#define cJSON_Raw    (1 << 7) /* raw json */            原始

每一个类型都是一个cJSON对象，cJSON对象的netx、prev指向同级元素，child字段指向
孩子元素，object或array可能是没有名字的，即string字段为空。

raw类型就像是个字符串类型，但字符串是json形式的, 譬如valuestring = [{"Name":"mqs",
"Age":34},{"Name":"cfq","Age":32}]。

6、新建cJSON对象
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
CJSON_PUBLIC(cJSON *) cJSON_CreateNull(void);
CJSON_PUBLIC(cJSON *) cJSON_CreateTrue(void);
CJSON_PUBLIC(cJSON *) cJSON_CreateFalse(void);
CJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool boolean);
CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num);
CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string);
CJSON_PUBLIC(cJSON *) cJSON_CreateRaw(const char *raw);
CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void);
CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void);

6、cjson解析(字符流 -> cJSON对象)
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

7、cjson add(struct -> cJSON对象)
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
/* Helper functions for creating and adding items to an object at the same time.
 * They return the added item or NULL on failure. */
CJSON_PUBLIC(cJSON*) cJSON_AddNullToObject(cJSON * const object, const char * const name);
CJSON_PUBLIC(cJSON*) cJSON_AddTrueToObject(cJSON * const object, const char * const name);
CJSON_PUBLIC(cJSON*) cJSON_AddFalseToObject(cJSON * const object, const char * const name);
CJSON_PUBLIC(cJSON*) cJSON_AddBoolToObject(cJSON * const object, const char * const name, const cJSON_bool boolean);
CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number);
CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string);
CJSON_PUBLIC(cJSON*) cJSON_AddRawToObject(cJSON * const object, const char * const name, const char * const raw);
CJSON_PUBLIC(cJSON*) cJSON_AddObjectToObject(cJSON * const object, const char * const name);      加入一个空对象
CJSON_PUBLIC(cJSON*) cJSON_AddArrayToObject(cJSON * const object, const char * const name);       加入一个空数组


/* Append item to the specified array/object. */
CJSON_PUBLIC(void) cJSON_AddItemToArray(cJSON *array, cJSON *item);
CJSON_PUBLIC(void) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item);
/* Use this when string is definitely const (i.e. a literal, or as good as), and will definitely survive the cJSON object.
 * WARNING: When this function was used, make sure to always check that (item->type & cJSON_StringIsConst) is zero before
 * writing to `item->string` */
CJSON_PUBLIC(void) cJSON_AddItemToObjectCS(cJSON *object, const char *string, cJSON *item);
/* Append reference to item to the specified array/object. Use this when you want to add an existing cJSON to a new cJSON, but don't want to corrupt your existing cJSON. */
CJSON_PUBLIC(void) cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item);
CJSON_PUBLIC(void) cJSON_AddItemReferenceToObject(cJSON *object, const char *string, cJSON *item);

8、cjson打印(cJSON对象 -> 字符流)
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item);
CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item);
CJSON_PUBLIC(char *) cJSON_PrintBuffered(const cJSON *item, int prebuffer, cJSON_bool fmt);
CJSON_PUBLIC(cJSON_bool) cJSON_PrintPreallocated(cJSON *item, char *buffer, const int length, const cJSON_bool format);

aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	cJSON_Print是最简单的打印函数，不考虑realloc开销；加了换行等格式，适合人类
查看
	cJSON_PrintUnformatted打印出的json字符串是紧凑的不用换行，适合传输json字符
串时使用
	cJSON_PrintBuffered可以指定首次分配缓冲区的大小，如果足够大，则可以节省不断
重新分配空间的时间；如果指定缓冲区过小，则与cJSON_Print和cJSON_PrintUnformatted
性能能相同。
	cJSON_PrintPreallocated可以将json字符串填入给定的缓冲区，并指定缓冲区大小。
缓冲区大小不够会返回错误。


9、cjson获取元素
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string);
CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string);

	cJSON_GetObjectItem大小写不敏感，cJSON_GetObjectItemCaseSensitive大小写敏感。

10、两个cJSON对象比较
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa


