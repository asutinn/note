1、Load/Store指令简介
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	Load/Store指令用于从内存(cache)加载数据到寄存器或把寄存器数据保存到内存(cache)。
指令有一个操作数。。。

	总体上，Load/Store指令可以分为3大类：
	opcode[27,26]=0b01     代表字或无符号字节Load/Store指令
	opcode[27,25]=0b100    代表批量Load/Store指令
	opcode[27,25]=0b000    opcode[7]=1 ipcode[4]=1 代表扩展Load/Store指令或乘法指令

	扩展Load/Store指令或乘法指令的编码格式：

    31  28 27 25  24  23                                  8   7  6   5  4  3     0
   +------+-----+---+---------------------------------------+---+-----+---+-------+
   | cond |0 0 0| * |                                       | 1 | * * | 1 |       |
   +------+-----+---+---------------------------------------+---+-----+---+-------+
   当***三位同时为0时是乘法指令，其它情况是扩展的Load/Store指令。

2、Load/Store指令编码的具体格式
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
3大类的Load/Store指令可分为7种完整的编码格式，如下表所示：

    31  28 27 25  24  23  22  21  20 19  16 15  12 11     8  7  6   5   4   3      0
   +------+-----+---+---+---+---+---+------+------+---------------------------------+
F1 | cond |0 1 0| P | U | B | w | L |  Rn  |  Rd  |           immediate             |
   +------+-----+---+---+---+---+---+------+------+------------+-------+---+--------+
F2 | cond |0 1 1| P | U | B | W | L |  Rn  |  Rd  |shift amount| shift | 0 |   Rm   |
   +------+-----+---+---+---+---+---+------+------+------------+-------+---+--------+
F3 | cond |1 0 0| P | U | S | W | L |  Rn  |  Rd  |       register list             |
   +------+-----+---+---+---+---+---+------+------+--------+---+---+---+---+--------+
F4 | cond |0 0 0| P | U | 1 | W | Z |  Rn  |  Rd  | immedH | 1 | Q | H | 1 | immedL |
   +------+-----+---+---+---+---+---+------+------+--------+---+---+---+---+--------+
F5 | cond |0 0 0| P | U | 0 | W | Z |  Rn  |  Rd  |  SBZ   | 1 | Q | H | 1 |   Rm   |
   +------+-----+---+---+---+---+---+------+------+--------+---+---+---+---+--------+
F6 | cond |0 0 0  1 | 0 | B | 0   0 |  Rn  |  Rd  |  SBZ   | 1   0   0   1 |   Rm   |
   +------+---------+---+---+---+---+------+------+--------+---------------+--------+
F7 | cond |0 0 0  1 | 1   0   0 | L |  Rn  |  Rd  |  SBO   | 1   0   0   1 |  SBO   |
   +------+---------+-----------+---+------+------+--------+---------------+--------+

[注]：
	只有F3有S标志，即影响标志寄存器。
	Q,H不会同时为0，所以F4、F5不会与F6、F7冲突

	F1：字或无符号字节 立即数偏移量Load/Store指令
	F2：字或无符号字节 寄存器偏移量Load/Store指令
	F3：批量Load/Store指令
	F4：半字、有符号半字、有符号字节、字 立即数偏移量Load/Store指令
	F5：半字、有符号半字、有符号字节、字 寄存器偏移量Load/Store指令
	F6：独占型(原子操作使用)Load/Store指令
	F7：交换指令

	SBZ：这些比特位读成0，忽略写
	SBO：这些比特位读成1，忽略写

2.1、F1、F2详解：
汇编指令格式：
	LDR/STR{<cond>}{B}{T} <Rd>, <address_mode>

解释：
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	杜春雷认为<address_mode>有九种情况，但从编码方式上看可以认为寄存器偏移是寄存器移
位偏移中的逻辑左移0位这样一种特殊情况。所以实际就是立即数、寄存器移位偏移量*不更新、事先更
新、事后更新基址寄存器共六种情况。

编码指令格式是怎么决定编码标志位的：

	U(Up/Down)
		0: 减偏移量    address_mode中偏移量前有"-"符号
		1：加偏移量    address_mode中偏移量前无符号

	B(Byte/Word)
		0:字          指令名中没有"B"
		1：无符号字节  指令名中有"B"，Rd高24位补0

	L(Load/Store)
		0:保存        指令名前三个字符为"STR"
		1:加载        指令名前三个字符为"LDR"

	P(Pre/Post)
		0:事后更新基址寄存器
			w(write-back)
				0:正常      指令名中不出现"T"
				1:用户模式  指令名中有"T"
		1:不更新或事先更新基址寄存器
			w(write-back)
				0:不更新    address_mode中偏移量在[]内，[]外无!
				1:事先更新  address_mode中偏移量在[]内，[]外有!

	immediate 12位立即数(与数据处理指令分解为索引和移位两部分不同，这里直接使用12位立
即数)，也就是说最大只能上下偏移2^12字节。

	shift amount、shift编码及含义与数据处理指令相同。
