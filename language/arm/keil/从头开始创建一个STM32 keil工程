0、参考文献
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
https://blog.csdn.net/whxngb/article/details/50427964
http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0206ic/Chdefbgg.html  arm官网非常详尽的文档

1、下载STM32F103C8系列的标准外设库：
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	进入意法首页“https://www.st.com”，点“Product Catalog”->“Microcontrollers”，选“
STM32 32-bit Arm Cortex MCUs”->“STM32 Mainstream MCUs”->“STM32F1 Series”->“STM32F103”
点“STM32F103C8” 点“Tools&Software”，进入资源页面，搜索“peripheral”，20181129时搜到的是
STSW-STM32054包，进去后版本是3.5.0。

2、STM32启动文件的选择：
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	在STM32F系列固件库Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup子
目录下有四个子文件夹arm、gcc_ride7、iar、TrueSTUDIO，给人的第一感觉就是这是针对
四个不同编译器的启动文件系列，是不是这样呢，我们来考察一下。

	我的猜测是对的，就是针对四种不同编译器编写的启动文件。不同的编译器调用的指令
集是不同的，arm适用于arm编译器(就是keil uVision??)；gcc_ride7适用基于GCC_ride7编
译器的；iar编译器我不太懂，TrueSTDIO是ST自己的编译器当然也是基于GCC的。

	所以，对于keil项目而言，我们应选择arm子文件夹下的启动文件。

3、给项目添加文件(Manage Project Items -> Project Items)：
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	在工程文件夹下新建四个文件夹(不是非要这么做，只是为了方便管理源文件)：CMSIS、
Libraries、Startup、User。

	将固件库里Libraries--->STM32F10x_StdPeriph_Driver下的inc和src文件夹拷贝到
Libraries文件夹下；

	将固件库里Libraries--->CMSIS--->CM3--->CoreSupport文件夹里面的core_cm3.c和
core_cm3.h文件拷贝到CMSIS文件夹下；

	将固件库里Project---->STM32F10x_StdPeriph_Template(这个文件夹里有KEIL和IAR建
好工程的模板)里的stm32f10x_conf.h、stm32f10x_it.c、stm32f10x_it.h、
system_stm32f10x.c四个文件拷贝到User文件夹下；

	将固件库里Libraries---->CMSIS---->CM3---->DeviceSupport---->ST---->STM32F10x
---->startup---->arm目录下的startup_stm32f10x_md.s文件拷贝到Startup文件夹下。

	这些目录与keil的项目管理是没有关系的，keil uVision有自己的管理策略，称为
"group",打开"Manage Project Items"页面，选择"Project Items"标签页，新建若干
"group"，并加入一些文件到这些group中去。这里我就根据我新建的这些文件夹来创建
"group"和添加文件。

	创建工程时，keil还会自动给我们创建若干文件夹：List(用于链接的)、Obj(工程文
件)、output(输出hex文件)三个文件夹什么时候用。

4、选择编译器、文件扩展名、工具链位置(Manage Project Items -> Folders/Extension)：
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	默认是使用armcc的

5、keil uVision如何编辑include路径
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	在"Options for Target"->"C/C++"->"Include Paths"，最好不要手动输入，推荐点后
面的"..."通过"Folder Setup"页面添加。

6、错误排查
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	#223-D: function "assert_param" declared implicitly
问题分析：
	函数assert_param是STM32官方库文件中用到的

	assert_param函数在文件“stm32f10x_conf.h”的第59-73行定义

	查看函数说明可知，assert_param是一个条件表达式宏定义，主要作用是对函数的输入
参数进行检查。仔细查看程序段，不管是否定义USE_FULL_ASSERT，函数assert_param均有
定义，编译时不应该出现上述警告。

	还有一种可能，那就是虽然定义了函数assert_param，但是包含定义的文件
“stm32f10x_conf.h”没有被编译。

	通过搜索发现文件“stm32f10x_conf.h”是在文件“stm32f10x.h”中条件包含的，只有定义
了"USE_STDPERIPH_DRIVER"，"stm32f10x_conf.h"才会被包含编译。

	文本“USE_STDPERIPH_DRIVER”的字面意思：使用标准外设驱动。也就是说如果需要使
用ST官方提供的外设驱动库则需要定义“USE_STDPERIPH_DRIVER”。

	很明显问题出在使用了官方的标准外设库又没有定义“USE_STDPERIPH_DRIVER”。

问题解决：
	"Options for Target"->"C/C++"->"Preprocessor Symbols"->"Define"

6、在user文件夹下添加"main.c"文件
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	添加"main.c"，并编写main函数

7、定制编译输出
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	包括输出目录、可执行文件名、可执行文件类型

	输出目录默认为"Objects";
	可执行文件名默认为工程名;
	可以选择编译为可执行文件还是链接库文件，可执行文件时可选择是否生成Hex文件或
batch文件。

8、意法中文文档下载
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
http://www.stmcu.org.cn/document/list/index/category-158

5、定制编译选项：
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

6、keil打印详细编译过程
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa