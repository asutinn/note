0、参考
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
https://zhuanlan.zhihu.com/p/26244141   知乎文章
https://zhuanlan.zhihu.com/p/26172972   知乎文章


PC上linux的PCI初始化过程
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	在硬件加电初始化时，BIOS固件同统一检查了所有的PCI设备， 并统一为他们分配了
一个和其他互不冲突的地址，让他们的驱动程序可以向这些地址映射他们的寄存器，这些
地址被BIOS写进了各个设备的配置空间，因为这个活动是一个PCI的标准的活动，所以自然
写到各个设备的配置空间里而不是他们风格各异的控制寄存器空间里。当然只有BIOS可以
访问配置空间。当操作系统初始化时，他为每个PCI设备分配了pci_dev结构，并且把BIOS
获得的并写到了配置空间中的地址读出来写到了pci_dev中的resource 字段中。这样以后
我们在读这些地址就不需要在访问配置空间了，直接跟pci_dev要就可以了，我们这里的四
个函数就是直接从pci_dev读出了相关数据，代码在include/linux/pci.h中。定义如下：

#define pci_resource_start(dev,bar) ((dev)->resource[(bar)].start)
#define pci_resource_end(dev,bar) ((dev)->resource[(bar)].end)

	这里需要说明一下，每个PCI设备有0-5一共6个地址空间，我们通常只使用前两个，这里
我们把参数1传给了bar就是使用内存映射的地址空间。

如果要更具体，查看pci_dev结构的初始化过程


PCI设备
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	通过lspci命令可以看到PC上所有的PCI设备，譬如我在一台i5-9400的机器上执行lspci
输出：
00:00.0 Host bridge: Intel Corporation 8th Gen Core Processor Host Bridge/DRAM Registers (rev 07)
00:01.0 PCI bridge: Intel Corporation Xeon E3-1200 v5/E3-1500 v5/6th Gen Core Processor PCIe Controller (x16) (rev 07)
00:02.0 VGA compatible controller: Intel Corporation Device 3e92
00:12.0 Signal processing controller: Intel Corporation Cannon Lake PCH Thermal Controller (rev 10)
00:14.0 USB controller: Intel Corporation Cannon Lake PCH USB 3.1 xHCI Host Controller (rev 10)
00:14.2 RAM memory: Intel Corporation Cannon Lake PCH Shared SRAM (rev 10)
00:16.0 Communication controller: Intel Corporation Cannon Lake PCH HECI Controller (rev 10)
00:17.0 SATA controller: Intel Corporation Cannon Lake PCH SATA AHCI Controller (rev 10)
00:1b.0 PCI bridge: Intel Corporation Cannon Lake PCH PCI Express Root Port 21 (rev f0)
00:1c.0 PCI bridge: Intel Corporation Device a33c (rev f0)
00:1f.0 ISA bridge: Intel Corporation Device a308 (rev 10)
00:1f.3 Audio device: Intel Corporation Cannon Lake PCH cAVS (rev 10)
00:1f.4 SMBus: Intel Corporation Cannon Lake PCH SMBus Controller (rev 10)
00:1f.5 Serial bus controller [0c80]: Intel Corporation Cannon Lake PCH SPI Controller (rev 10)
01:00.0 Memory controller: Xilinx Corporation Device 7024
02:00.0 Non-Volatile memory controller: Sandisk Corp Device 5006
03:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller (rev 15)

可以看到，北桥芯片(可能是下行方向)也是PCI设备。各种USB控制器、串口控制器等等也都是PCI设备。


PCI设备编号
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
lspci:
	domain:bus:slot.func

https://www.cnblogs.com/zhouhaibing/p/7898792.html
https://blog.csdn.net/zhongyhc/article/details/38781695
https://blog.csdn.net/hz5034/article/details/79790074
总线号、设备号、功能号   (Bus,Dev,Func) numbers

Linux现在支持多个PCI domain，每个PCI domain管理256个bus（2^8），每个bus上可以挂载32（2^5）个设备，每个设备最多支持8（2^3）个function。同一PCI bus上的设备共享memory location和I/O port的地址空间，而configuration register则不是。每个PCI设备的configuration register占256个字节。



PCI驱动
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
PCI有三个空间：Configuration Space、Memory Space、IO Space。

对Legacy PCI来讲，Configuration Space有256 Bytes
对于PCIe, Configuration Space有4096 Bytes 

处理器系统会为所有bus:slot:func组合留有配置空间，没有实际设备占据的配置空间都是
0xFF，表示设备不存在。

lspci -s 00:03.0 -vxx 可以查看“00:03.0”设备的配置空间


配置空间应该存在于板卡内部。