0、参考
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
https://blog.csdn.net/faihung/article/details/78839551       很好的资料
https://blog.csdn.net/go_str/article/details/80802452        USB具体通讯过程
https://blog.csdn.net/qq_16777851/article/list/3?t=1         重要的系列文章
https://blog.csdn.net/h490516509/article/details/88395911    枚举过程



1、概念
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
1.1、端点
    一个具体的端点只能工作在一种传输模式下。通常我们把工作在什么模式下的端点，叫做什么端点。如控制端点、批量端点、同步端点、中断端点。
    端点0是设备的默认控制端点，在设备上电后就存在并可以使用，在Set Config之前所有的传输都是通过端点0传输的。
    端点描述符中规定了端点所能支持的最大包长。
        控制传输：高速模式的最大包长固定为64个字节；全速模式可在8、16、32、64字节中选择；低速模式的最大包长固定为8个字节。
        批量传输：高速模式固定为512个字节；全速模式最大包长可在8、16、32、64字节中选择；低速模式不支持批量传输。
        同步传输：高速模式的最大包长上限为1024个字节；全速模式的最大包长上限为1023个字节；低速模式不支持同步传输。
        中断传输：告诉模式的最大包长上限为1024个字节；全速模式最大包长上限为64个字节；低速模式最大最大包长上限为8个字节。

 




usb device viewer


USB数据包
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	USB总线上传输的基本单位是包。

	不同的事务类型支持不同的包？

	包由PID标识？


USB的端点、管道、接口、配置、设备
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	一个USB设备(在最底层，有一个struct device与之对应)，可以有一个或多个配置。不
同的配置是接口的不同组合。每个接口都需要实现响应的驱动程序。

	我们可以看看linux的实现，在include/linux/usb.h文件中有struct usb_driver结构
体的定义，我们可以看到其中的回调函数都是以struct usb_interface为参数。

所以我们可以这样笼统地说：
	一个usb设备由可以有一个或多个配置
	一个配置通常可以有一个或多个接口
	一个接口通常可以有一个或多个端点
通常所说的usb设备驱动是指接口驱动，即一个接口对应一个驱动。我认为这样说其实不正确，
只是说usb驱动的回调都是以接口为单位的，有多少个接口就要回调多少次而已。

	usb接口在注册driver时将for_devices设置为0，for_devices =1，表示设备驱动，
for_devices = 0，表示接口(hub?)驱动



USB事务
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
参考：
https://blog.csdn.net/qq_16777851/article/details/85463744

	USB协议规定：需按照一定的关系吧不同的包组织成事务才能传输数据。USB是主从模式
的传输总线，只有当主机提出请求时，设备才可以进行数据传输。事务体现了这种主从关系。

	事务通常由两个包（令牌包、握手包）或三个包（令牌包、数据包、握手包）组成。
各种包在事务中担任的职责分别是：
	1）令牌包用来启动一个事务，总是由主机发送。
	2）数据包传送数据，可以从主机到设备，也可以从设备到主机，方向由令牌包决定。
	3）握手包的发送者通常为数据接收者，当数据接收正确后，发送握手包。设备也可以用
NAK握手来决定数据还未准备好

	USB协议规定了4种传输类型：批量传输、等时传输、中断传输和控制传输。其中批量
传输、等时传输和中断传输每传输一次数据都是一个事务；控制传输包括三个过程，建立
过程和状态过程分别是一个事务，数据过程则可能包含多个事务。

	https://blog.csdn.net/qq_16777851/article/details/85463744

	控制传输分为三个过程：
	1）第一个过程是建立过程
	2）第二个过程是可选的数据过程
	3）第三个过程是状态过程

	建立过程使用建立事务，建立事务与批量输出事务类似，但有几处不同：
	1）首先是令牌包不一样，建立过程使用SETUP令牌包。
	2）其次是数据包类型，SETUP只能使用DATA0包。
	3）最后是握手，设备只能采用ACK来应答（错了的情况不应答），不能使用NAK或者
STALL来应答，即设备必须要接受建立事务的数据。

	数据过程是可选的，即一个控制传输可能没有数据过程。如果有，一个数据过程可以
包含一个或多个数据事务。数据事务必须都以IN或都是OUT令牌包开始，并始终使用DATA1
数据包。

	状态事务的令牌包与数据事务的令牌包相反，数据使用使用IN令牌，则状态事务使用
OUT令牌

	USB的标准请求都是使用控制传输方式发出的。


USB请求
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
请求类型：
	standard
	class
	vendor


IRP(I/O Request Packets)
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
USB 底层驱动程序：USB 底层驱动程序由操作系统提供，它位于 USB 功能驱动程序的下面，负责与实际的硬件打交道，实现繁琐的底层通信。
    USB 功能驱动程序：USB 功能驱动程序由设备开发者编写，位于 USB 底层驱动程序的上面，不与实际的硬件打交道，而是通过向 USB 底层驱动程序发送包含 URB(USB Request Block， USB请求块)的 IRP(I/O Request Packet， I/O 请求包)，来实现对 USB 设备信息的发送和接收。

     应用程序完成一次I/O操作的过程

     若应用程序想对设备进行 I/O 操作，它需调用 Windows API 函数 ，I/O 管理器将此请求构造成一个合适的 I/O 请求包 IRP 并把它传递给 USB 功能驱动程序。USB 功能驱动程序接收到这个 IRP 以后，根据 IRP 中包含的具体操作代码，构造相应 USB 请求块并把此 URB 放到一个新的 IRP 中，然后把此 IRP 传递 USB 底层驱动程序，USB底层驱动程序根据 IRP 中所含的 URB 执行响应的操作(如从 USB 设备读取数据)，并把操作结果返还给 USB 功能驱动程序。USB 功能驱动程序接收到此 IRP 后，将操作结果通过 IRP 返还给 I/O 管理器，最后 I/O 管理器将此 IRP 操作结果返还给应用程序，至此应用程序对 USB 设备的一次 I/O 操作完成。

usb传输类型
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
http://bbs.elecfans.com/jishu_1680756_1_1.html

	传输方式USB,有四种的传输方式,控制(Control),同步(isochronous),中断(interrupt),大量(bulk)


usb urb
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	usb request block
