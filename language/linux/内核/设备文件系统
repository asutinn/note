


devfs、sysfs、udev
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
参考：
	https://blog.csdn.net/lucky_liuxiang/article/details/83413946
	https://blog.csdn.net/qq258711519/article/details/8090418
	https://www.cnblogs.com/linhaostudy/archive/2018/07/08/9279041.html

	在sysfs以前时代，使用cdev_init和cdev_add创建字符设备后还需使用mknod手动创建
设备节点；后来出现了udev和sysfs，通过cdev_init和cdev_add添加字符设备，然后通过
class_create和device_create函数往sys文件系统中添加设备，udev检测到/sys目录的变
动会根据变化在/dev目录下创建对应的设备节点。

	在linux2.4还出现了devfs系统，使用devfsd守护进程来管理设备，向devfs注册的驱动
程序，devfs将会在/dev下建立相应的设备文件。不过从linux2.6内核开始，udev和sysfs已
经取代了它，devfs被抛弃了，我们也无需关注它了。

	udev可以认为是与sysfs配套使用的一个工具，也是以守护进程的方式存在，在ubuntu
下udevd或者systemd-udevd。


struct *file
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	Linux的一个重要理念是：一切皆文件。struct file结构体定义在include/linux/fs.h
中定义。此结构体在内核中代表一个打开的文件，系统中的每个打开的文件在内核空间都有
一个关联的 struct file。它由内核在打开文件时创建，并传递给在文件上进行操作的任何
函数。在文件的所有实例都关闭后，内核释放这个数据结构。在内核创建和驱动源码中，
struct file的指针通常被命名为file或filp。其有两个非常重要的字段：文件描述符和缓冲区。

	struct file的完整定义：
struct file {
	union {
		struct llist_node           fu_llist;
		struct rcu_head             fu_rcuhead;
	} f_u;
	struct path                     f_path;
	struct inode                    *f_inode;	/* cached value */
	const struct file_operations    *f_op;

	/*
	 * Protects f_ep_links, f_flags.
	 * Must not be taken from IRQ context.
	 */
	spinlock_t                      f_lock;
	atomic_long_t                   f_count;
	unsigned int                    f_flags;
	fmode_t                         f_mode;
	struct mutex                    f_pos_lock;
	loff_t                          f_pos;
	struct fown_struct              f_owner;
	const struct cred               *f_cred;
	struct file_ra_state            f_ra;

	u64                             f_version;
#ifdef CONFIG_SECURITY
	void                            *f_security;
#endif
	/* needed for tty driver, and maybe others */
	void                            *private_data;

#ifdef CONFIG_EPOLL
	/* Used by fs/eventpoll.c to link all the hooks to this file */
	struct list_head                f_ep_links;
	struct list_head                f_tfile_llink;
#endif /* #ifdef CONFIG_EPOLL */
	struct address_space            *f_mapping;
} __attribute__((aligned(4)));	/* lest something weird decides that 2 is OK */

struct file_handle {
	__u32 handle_bytes;
	int handle_type;
	/* file identifier */
	unsigned char f_handle[0];
};

重要的字段：
const struct file_operations *f_op