linux kernel dmaengine框架

DMA传输类型
enum dma_transaction_type {
	DMA_MEMCPY,
	DMA_XOR,
	DMA_PQ,
	DMA_XOR_VAL,
	DMA_PQ_VAL,
	DMA_MEMSET,
	DMA_MEMSET_SG,
	DMA_INTERRUPT,
	DMA_SG,
	DMA_PRIVATE,
	DMA_ASYNC_TX,
	DMA_SLAVE,
	DMA_CYCLIC,
	DMA_INTERLEAVE,
/* last transaction type for creation of the capabilities mask */
	DMA_TX_TYPE_END,
};


研究到了hiedmacv310.c   get_of_probe中的时钟寄存器


1、hiedmacv310.c  get_of_probe函数解析
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	platform_get_resource()

of_platform_default_populate_init
of_platform_device_create
of_platform_device_create_pdata
of_device_alloc
of_amba_device_create
	of_device_make_bus_id



2、dmaengine架构分析
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
参考
	https://blog.csdn.net/zhaoyi2/article/details/87800839
	http://www.wowotech.net/linux_kenrel/dma_engine_api.html

总体
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	DMA可以控制memory到memory、memory到device、device到memory以及device到device的数
据传输，DMA控制器在其中扮演中介的角色。对于DMA控制器而言，传输的两头都是slave。

	DMA的传输工作需要DMA控制器驱动、设备驱动(包括内存驱动？)共同参与。Linux独立于DMA控制
器驱动和设备驱动提供了一套DMA框架，源码位于drivers/dma/dmaengine.c中，有了这套框架，
DMA控制器驱动向它注册自己，而设备驱动调用框架函数驱动DMA控制器来控制DMA通道进行传输。

	DMA的硬件构成：一般地芯片会提供一个或多个DMA控制器，每个DMA控制器有多条物理通道（
海思是4条或者8条），各通道可能与很多设备相连，使用请求线概念来区分DMA相连的设备（有方向
性），譬如0号请求线代表“I2C0 RX通道DMA请求”。

	linux的DMA还提供了虚拟通道的概念，源码位于drivers/dma，


hiedmacv310_phy_chan
virt-dma.h

struct virt_dma_chan








4、linux
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
dma_d