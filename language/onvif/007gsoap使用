1、下载gsoap源码
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	从genivia inc公司官网下载gsoap GPLv2授权版本的源码，我下载的是gsoap_2.8.83
版。

2、编译安装
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
https://blog.csdn.net/qq_18854309/article/details/76737948
https://blog.csdn.net/gufeijunchi/article/details/42079441

	编译过程主要参照第二篇帖子，主要是编译过程中缺库的处理。需要特别主要的是：ubuntu
下没有yacc库，有byacc库，但其实我们需要使用bison库。我错误地安装了byacc库，报错“
soapcpp2_lex.c no such file or directory”，安装bison库后，卸载byacc库、make clear
都不能解决问题，最后把项目删除，从新unzip、configure才解决问题。

	./configure --prefix=/usr/local
	make
	make install

	安装完以后，/usr/local/bin下面出现soapcpp2、wsdl2h两个可执行文件。


3、gsoap安装后的share文件
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
譬如安装目录为/usr/local，那么在/usr/local/share/gsoap下会出现四个文件夹：
custom
extras
import
plugin
WS


4、gsoap中的一些重要文件
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
4.1、import/xsd.h
  xsd.h定义xsd的类型到c/c++类型的转换。wsdl2h -m会把此文件自动包含到产生的.h文件
中。可以在typemap.dat重新定义转换规则。譬如xsd_duration在xsd.h是char *，但如果我
们在typemap.dat文件中添加一行“xsd__duration = #import "custom/duration.h" | xsd__duration”
那么xsd_duration将使用custom/duration.c中的定义。

http://www.w3.org/2001/XMLSchema在typemap.dat的缩写为xsd，而在wsdl文件中为xs。
这样会不会对应不起来，答案是否定的，可以对应起来。譬如上面的xs:duration可以被
成功替换成#import "custom/duration.h"。

3、wsdl2h工具介绍
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
https://www.genivia.com/doc/guide/html/index.html#wsdlin
3.1、功能：
	The wsdl2h tool is an advanced XML data binding tool to convert WSDLs and 
XML schemas (XSD files) to C or C++. The tool takes WSDL and XSD files or URLs 
to WSDLs and XSDs, then converts these to a C or C++ interface header file that 
specifies the properties of the WSDLs and XSDs in a familiar C/C++ syntax. This 
header file is not intended to be included in your code directly. It should be 
converted by soapcpp2 to generate the logic for the data bindings. It can however 
be safely converted by a documentation tool such as Doxygen to analyze and 
represent the service operations and data in a convenient layout. To this end, 
the generated interface header file is self-explanatory.

	wsdl2h工具是一种高级XML数据绑定工具，用于将WSDL文件和XML schemas文件（XSD文
件）转换成C或C++。将WSDL、XSD文件或WSDL、XSD文件的URL路径作为参数传给wsdl2h，wsdl2h
将这些转换为C或C++接口头文件。此头文件不打算直接包含在代码中。它应该由soapcpp2转
换以生成数据绑定的逻辑。但是，它可以通过文档工具（如doxygen）安全地转换，以方便
地以一种布局分析和表示服务操作和数据。为此，生成的接口头文件是不言而喻的。

	The wsdl2h tool can also be used without WSDLs to convert XML schemas (XSDs) 
to C/C++ to implement XML data bindings in C and C++. The wsdl2h tool generates 
the XML data binding interface header file with the C/C++ data type equivalents 
to the XML schema types and components.

	The soapcpp2 tool then generates the XML data binding implementation source 
code from the data binding interface header file, meaning the serialization 
source code to serialize C/C++ data in XML and the client-side stub functions 
to invoke remote service operations and the server-side skeleton functions to 
implement XML Web services.

	Therefore, the creation of C and C++ applications from one of more WSDLs or 
XSDs is a two-step process.


-a           generate indexed struct names for local elements with anonymous types
-b           generate bi-directional operations to serve one-way response messages (duplex)
-c           generate C source code
-c++         generate C++ source code (default)
-c++11       generate C++11 source code
-D           make attribute members with default/fixed values optional with pointers
-d           generate DOM code for xsd:any and xsd:anyType elements
-e           don't qualify enum names
-F           add transient members to structs to simulate struct-type derivation in C
-f           generate flat C++ class hierarchy by removing inheritance
-g           generate global top-level element and attribute declarations
-h           display help info and exit
-I path      use path to locate WSDL and XSD files
-i           don't import (advanced option)
-j           don't generate SOAP_ENV__Header and SOAP_ENV__Detail definitions
-k           don't generate SOAP_ENV__Header mustUnderstand qualifiers
-L           generate less documentation by removing generic @note comments
-l           display license information
-M           suppress error "must understand element with wsdl:required='true'"
-m           use xsd.h module to import primitive types
-N name      use name for service prefixes to produce a service for each binding
-n name      use name as the base namespace prefix name instead of ns
-O1          optimize by omitting duplicate choice/sequence members
-O2          optimize -O1 and omit unused schema types (unreachable from roots)
-O3          optimize -O2 and omit unused schema root attributes
-O4          optimize -O3 and omit unused schema root elements (use only with WSDLs)
-Ow2         optimize -O2 while retaining all derived types of used base types
-Ow3         optimize -O3 while retaining all derived types of used base types
-Ow4         optimize -O4 while retaining all derived types of used base types
-o file      output to file
-P           don't create polymorphic types inherited from xsd__anyType
-p           create polymorphic types inherited from base xsd__anyType (automatic when the WSDL or XSD contains polymorphic definitions)
-Q           make xsd__anySimpleType equal to xsd__anyType to use as the base type
-q name      use name for the C++ namespace of all declarations
-R           generate REST operations for REST bindings in the WSDL
-r           host[:port[:uid:pwd]] 	connect via proxy host, port, and proxy credentials uid and pwd
-r :uid:pwd  connect with authentication credentials uid and pwd
-S name      use name instead of soap for the soap context included in C++ classes as a member variable or use -S "" to remove it
-s           don't generate STL code (no std::string and no std::vector)
-t file      use type map file instead of the default file typemap.dat
-U           map Unicode XML names to UTF-8-encoded Unicode C/C++ identifiers
-u           don't generate unions
-V           display the current version and exit
-v           verbose output
-W           suppress warnings
-w           always wrap response parameters in a response struct
-x           don't generate _XML any and _XML anyAttribute extensibility elements
-y           generate typedef synonyms for structs and enums
-z1          compatibility with 2.7.6e: generate pointer-based arrays
-z2          compatibility with 2.7.15: qualify element/attribute referenced members
-z3          compatibility with 2.7.16 to 2.8.7: qualify element/attribute references
-z4          compatibility up to 2.8.11: don't generate union structs in std::vector
-z5          compatibility up to 2.8.15: don't include minor improvements
-z6          compatibility up to 2.8.17: don't include minor improvements
-z7          compatibility up to 2.8.59: don't generate std::vector of class of union
-_           don't generate _USCORE (replace with Unicode _x005f) 




root@mqs-virtual-machine:/mnt/hgfs/share/onvif/wsdl# wsdl2h -c -s -o ./onvif.h ./remotediscovery.wsdl ./devicemgmt.wsdl ./event.wsdl ./media.wsdl 
Saving ./onvif.h


**  The gSOAP WSDL/WADL/XSD processor for C and C++, wsdl2h release 2.8.83
**  Copyright (C) 2000-2019 Robert van Engelen, Genivia Inc.
**  All Rights Reserved. This product is provided "as is", without any warranty.
**  The wsdl2h tool and its generated software are released under the GPL.
**  ----------------------------------------------------------------------------
**  A commercial use license is available from Genivia Inc., contact@genivia.com
**  ----------------------------------------------------------------------------

Reading type definitions from type map "/usr/local/share/gsoap/WS/typemap.dat"
Reading './remotediscovery.wsdl'...
Done reading './remotediscovery.wsdl'
Reading './devicemgmt.wsdl'...
  Reading schema '../../ver10/schema/onvif.xsd'...
    Connecting to 'http://docs.oasis-open.org/wsn/b-2.xsd' to retrieve schema... connected, receiving...
      Connecting to 'http://docs.oasis-open.org/wsrf/bf-2.xsd' to retrieve schema... connected, receiving...
      Done reading 'http://docs.oasis-open.org/wsrf/bf-2.xsd'
      Connecting to 'http://docs.oasis-open.org/wsn/t-1.xsd' to retrieve schema... connected, receiving...
      Done reading 'http://docs.oasis-open.org/wsn/t-1.xsd'
    Done reading 'http://docs.oasis-open.org/wsn/b-2.xsd'
    Reading schema '../../ver10/schema/common.xsd'...
    Done reading '../../ver10/schema/common.xsd'
  Done reading '../../ver10/schema/onvif.xsd'
Done reading './devicemgmt.wsdl'
Reading './event.wsdl'...
  Connecting to 'http://docs.oasis-open.org/wsn/bw-2.wsdl' to retrieve WSDL/WADL or XSD... connected, receiving...
    Connecting to 'http://docs.oasis-open.org/wsrf/rw-2.wsdl' to retrieve WSDL/WADL or XSD... connected, receiving...
      Connecting to 'http://docs.oasis-open.org/wsrf/r-2.xsd' to retrieve schema... connected, receiving...
      Done reading 'http://docs.oasis-open.org/wsrf/r-2.xsd'
    Done reading 'http://docs.oasis-open.org/wsrf/rw-2.wsdl'
  Done reading 'http://docs.oasis-open.org/wsn/bw-2.wsdl'
Done reading './event.wsdl'
Reading './media.wsdl'...
Done reading './media.wsdl'

Warning: ignoring type inheritance by default for C, use option -F to generate struct declarations with simulated inheritance using transient pointer members pointing to derived types to serialize derived types as elements annotated by xsi:type attributes in XML.

Warning: 2 service bindings found, but collected as one service (use option -Nname to produce a separate service for each binding)

Warning: 8 service bindings found, but collected as one service (use option -Nname to produce a separate service for each binding)

To finalize code generation, execute:
> soapcpp2 ./onvif.h







WSDL2H工具也可以在没有WSDL的情况下将XML模式（XSDS）转换成C/C++来实现C和C++中的XML数据绑定。WSDL2H工具生成XML数据绑定接口头文件，其中C/C++数据类型等价于XML模式类型和组件。


SOAPCP2工具然后从数据绑定接口头文件生成XML数据绑定实现源代码，这意味着序列化源代码在XML中序列化C/C++数据和客户端存根函数来调用远程服务操作和服务器端骨架函数来实现XMLWeb服务。


因此，从多个WSDL或XSDS之一创建C和C++应用程序是两个步骤。


首先，将WSDL转换为C++，我们使用：


3、
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
wsdl2h  -c–s  -t ./typemap.dat  -o  onvif.h http://www.onvif.org/onvif/ver10/network/wsdl/remotediscovery.wsdl





4、soapcpp2
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa


    projects/myH.h serialization functions, this file should be included in projects.
    projects/myC.c serialization functions
    projects/myClient.c client call stub functions
    projects/myServer.c server request dispatcher
    projects/myStub.h annotated copy of the source interface header file
    projects/ns.nsmap namespace table, this file should be included or used in projects.
    projects/ns.wsdl WSDL with Web service definitions
    projects/ns.xsd XML schema


    stdsoap2.cpp
    stdsoap2.h


https://blog.csdn.net/qq_18854309/article/details/76737948
:./soapcpp2 -s -2 onvif.h -x -I../gsoap-2.8/gsoap -I ../gsoap-2.8/gsop/import/ -I ../gsoap-2.8/gsoap/plugin -I../gsoap-2.8/gsoap/custom


import也很重要，诸如xsd_duration的定义就是通过import引入的。
https://bbs.csdn.net/topics/390117550