1、下载gsoap源码
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	从genivia inc公司官网下载gsoap GPLv2授权版本的源码，我下载的是gsoap_2.8.83
版。

2、编译安装
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
https://blog.csdn.net/qq_18854309/article/details/76737948
https://blog.csdn.net/gufeijunchi/article/details/42079441

	编译过程主要参照第二篇帖子，主要是编译过程中缺库的处理。需要特别主要的是：ubuntu
下没有yacc库，有byacc库，但其实我们需要使用bison库。我错误地安装了byacc库，报错“
soapcpp2_lex.c no such file or directory”，安装bison库后，卸载byacc库、make clear
都不能解决问题，最后把项目删除，从新unzip、configure才解决问题。

	./configure --prefix=/usr/local
	make
	make install

	安装完以后，/usr/local/bin下面出现soapcpp2、wsdl2h两个可执行文件。


3、gsoap安装后的share文件
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
譬如安装目录为/usr/local，那么在/usr/local/share/gsoap下会出现四个文件夹：
custom
extras
import
plugin
WS


4、gsoap中的一些重要文件
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
4.1、import/xsd.h
	xsd.h定义xsd的类型到c/c++类型的转换。wsdl2h -m会把此文件自动包含到产生的.h文件
中。可以在typemap.dat重新定义转换规则。譬如xsd_duration在xsd.h是char *，但如果我
们在typemap.dat文件中添加一行“xsd__duration = #import "custom/duration.h" | xsd__duration”
那么xsd_duration将使用custom/duration.c中的定义。

http://www.w3.org/2001/XMLSchema在typemap.dat的缩写为xsd，而在wsdl文件中为xs。
这样会不会对应不起来，答案是否定的，可以对应起来。譬如上面的xs:duration可以被
成功替换成#import "custom/duration.h"。

3、wsdl2h工具介绍
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
https://www.genivia.com/doc/guide/html/index.html#wsdlin
3.1、功能：
	The wsdl2h tool is an advanced XML data binding tool to convert WSDLs and 
XML schemas (XSD files) to C or C++. The tool takes WSDL and XSD files or URLs 
to WSDLs and XSDs, then converts these to a C or C++ interface header file that 
specifies the properties of the WSDLs and XSDs in a familiar C/C++ syntax. This 
header file is not intended to be included in your code directly. It should be 
converted by soapcpp2 to generate the logic for the data bindings. It can however 
be safely converted by a documentation tool such as Doxygen to analyze and 
represent the service operations and data in a convenient layout. To this end, 
the generated interface header file is self-explanatory.

	wsdl2h工具是一种高级XML数据绑定工具，用于将WSDL文件和XML schemas文件（XSD文
件）转换成C或C++。将WSDL、XSD文件或WSDL、XSD文件的URL路径作为参数传给wsdl2h，wsdl2h
将这些转换为C或C++接口头文件。此头文件不打算直接包含在代码中。它应该由soapcpp2转
换以生成数据绑定的逻辑。但是，它可以通过文档工具（如doxygen）安全地转换，以方便
地以一种布局分析和表示服务操作和数据。为此，生成的接口头文件是不言而喻的。

	The wsdl2h tool can also be used without WSDLs to convert XML schemas (XSDs) 
to C/C++ to implement XML data bindings in C and C++. The wsdl2h tool generates 
the XML data binding interface header file with the C/C++ data type equivalents 
to the XML schema types and components.

	The soapcpp2 tool then generates the XML data binding implementation source 
code from the data binding interface header file, meaning the serialization 
source code to serialize C/C++ data in XML and the client-side stub functions 
to invoke remote service operations and the server-side skeleton functions to 
implement XML Web services.

	Therefore, the creation of C and C++ applications from one of more WSDLs or 
XSDs is a two-step process.

3.2、wsdl2h工具选项
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
-a           generate indexed struct names for local elements with anonymous types
-b           generate bi-directional operations to serve one-way response messages (duplex)
-c           generate C source code
-c++         generate C++ source code (default)
-c++11       generate C++11 source code
-D           make attribute members with default/fixed values optional with pointers
-d           generate DOM code for xsd:any and xsd:anyType elements
-e           don't qualify enum names
-F           add transient members to structs to simulate struct-type derivation in C
-f           generate flat C++ class hierarchy by removing inheritance
-g           generate global top-level element and attribute declarations
-h           display help info and exit
-I path      use path to locate WSDL and XSD files
-i           don't import (advanced option)
-j           don't generate SOAP_ENV__Header and SOAP_ENV__Detail definitions
-k           don't generate SOAP_ENV__Header mustUnderstand qualifiers
-L           generate less documentation by removing generic @note comments
-l           display license information
-M           suppress error "must understand element with wsdl:required='true'"
-m           use xsd.h module to import primitive types
-N name      use name for service prefixes to produce a service for each binding
-n name      use name as the base namespace prefix name instead of ns
-O1          optimize by omitting duplicate choice/sequence members
-O2          optimize -O1 and omit unused schema types (unreachable from roots)
-O3          optimize -O2 and omit unused schema root attributes
-O4          optimize -O3 and omit unused schema root elements (use only with WSDLs)
-Ow2         optimize -O2 while retaining all derived types of used base types
-Ow3         optimize -O3 while retaining all derived types of used base types
-Ow4         optimize -O4 while retaining all derived types of used base types
-o file      output to file
-P           don't create polymorphic types inherited from xsd__anyType
-p           create polymorphic types inherited from base xsd__anyType (automatic when the WSDL or XSD contains polymorphic definitions)
-Q           make xsd__anySimpleType equal to xsd__anyType to use as the base type
-q name      use name for the C++ namespace of all declarations
-R           generate REST operations for REST bindings in the WSDL
-r           host[:port[:uid:pwd]] 	connect via proxy host, port, and proxy credentials uid and pwd
-r :uid:pwd  connect with authentication credentials uid and pwd
-S name      use name instead of soap for the soap context included in C++ classes as a member variable or use -S "" to remove it
-s           don't generate STL code (no std::string and no std::vector)      不要使用STL库
-t file      use type map file instead of the default file typemap.dat
-U           map Unicode XML names to UTF-8-encoded Unicode C/C++ identifiers
-u           don't generate unions
-V           display the current version and exit
-v           verbose output
-W           suppress warnings
-w           always wrap response parameters in a response struct
-x           don't generate _XML any and _XML anyAttribute extensibility elements
-y           generate typedef synonyms for structs and enums
-z1          compatibility with 2.7.6e: generate pointer-based arrays
-z2          compatibility with 2.7.15: qualify element/attribute referenced members
-z3          compatibility with 2.7.16 to 2.8.7: qualify element/attribute references
-z4          compatibility up to 2.8.11: don't generate union structs in std::vector
-z5          compatibility up to 2.8.15: don't include minor improvements
-z6          compatibility up to 2.8.17: don't include minor improvements
-z7          compatibility up to 2.8.59: don't generate std::vector of class of union
-_           don't generate _USCORE (replace with Unicode _x005f) 


3.3、我使用的wsdl2h命令：
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
wsdl2h  -c -o ./onvif.h ./*.wsdl

3.4、wsdl2h日志
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
Saving ./onvif.h


**  The gSOAP WSDL/WADL/XSD processor for C and C++, wsdl2h release 2.8.83
**  Copyright (C) 2000-2019 Robert van Engelen, Genivia Inc.
**  All Rights Reserved. This product is provided "as is", without any warranty.
**  The wsdl2h tool and its generated software are released under the GPL.
**  ----------------------------------------------------------------------------
**  A commercial use license is available from Genivia Inc., contact@genivia.com
**  ----------------------------------------------------------------------------

Reading type definitions from type map "/usr/local/share/gsoap/WS/typemap.dat"
Reading './remotediscovery.wsdl'...
Done reading './remotediscovery.wsdl'
Reading './devicemgmt.wsdl'...
  Reading schema '../../ver10/schema/onvif.xsd'...
    Connecting to 'http://docs.oasis-open.org/wsn/b-2.xsd' to retrieve schema... connected, receiving...
      Connecting to 'http://docs.oasis-open.org/wsrf/bf-2.xsd' to retrieve schema... connected, receiving...
      Done reading 'http://docs.oasis-open.org/wsrf/bf-2.xsd'
      Connecting to 'http://docs.oasis-open.org/wsn/t-1.xsd' to retrieve schema... connected, receiving...
      Done reading 'http://docs.oasis-open.org/wsn/t-1.xsd'
    Done reading 'http://docs.oasis-open.org/wsn/b-2.xsd'
    Reading schema '../../ver10/schema/common.xsd'...
    Done reading '../../ver10/schema/common.xsd'
  Done reading '../../ver10/schema/onvif.xsd'
Done reading './devicemgmt.wsdl'
Reading './event.wsdl'...
  Connecting to 'http://docs.oasis-open.org/wsn/bw-2.wsdl' to retrieve WSDL/WADL or XSD... connected, receiving...
    Connecting to 'http://docs.oasis-open.org/wsrf/rw-2.wsdl' to retrieve WSDL/WADL or XSD... connected, receiving...
      Connecting to 'http://docs.oasis-open.org/wsrf/r-2.xsd' to retrieve schema... connected, receiving...
      Done reading 'http://docs.oasis-open.org/wsrf/r-2.xsd'
    Done reading 'http://docs.oasis-open.org/wsrf/rw-2.wsdl'
  Done reading 'http://docs.oasis-open.org/wsn/bw-2.wsdl'
Done reading './event.wsdl'
Reading './media.wsdl'...
Done reading './media.wsdl'

Warning: ignoring type inheritance by default for C, use option -F to generate struct declarations with simulated inheritance using transient pointer members pointing to derived types to serialize derived types as elements annotated by xsi:type attributes in XML.

Warning: 2 service bindings found, but collected as one service (use option -Nname to produce a separate service for each binding)

Warning: 8 service bindings found, but collected as one service (use option -Nname to produce a separate service for each binding)

To finalize code generation, execute:
> soapcpp2 ./onvif.h



4、soapcpp2
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
4.1、soapcpp2的选项：
-0        no SOAP, generate REST source code
-1        generate SOAP 1.1 source code
-2        generate SOAP 1.2 source code                   生成soap 1.2代码
-A        require HTTP SOAPAction headers to invoke server-side operations
-a        use HTTP SOAPAction headers with WS-Addressing to invoke server-side operations
-b        serialize byte arrays char[N] as string
-C        generate client-side source code only
-c        generate C source code                           生成c代码
-c++      generate C++ source code (default)
-c++11    generate C++ source code optimized for C++11 (compile with -std=c++11)
-d path   use path to save files
-Ec       generate extra functions for deep copying
-Ed       generate extra functions for deep deletion
-Et       generate extra functions for data traversals with callback functions
-e        generate SOAP RPC encoding style bindings (also use -1 or -2)
-f N      multiple soapC files, with N serializer definitions per file (N>=10)
-g        generate XML sample messages in template format for testmsgr
-h        display help info and exit
-I path   use path(s) for #import (paths separated with :)
-i        generate C++ service proxies and objects inherited from soap struct
-j        generate C++ service proxies and objects that share a soap struct
-L        don't generate soapClientLib and soapServerLib         不要生成soapClientLib和soapServerLib
-l        generate linkable modules (experimental)
-m        generate source code for the Matlab(tm) MEX compiler (deprecated)
-n        use service name to rename service functions and namespace table
-p name   save files with new prefix name instead of soap
-Q name   use name as the C++ namespace, including custom serializers
-q name   use name as the C++ namespace, excluding custom serializers
-r        generate soapReadme.md report
-S        generate server-side source code only                                    仅生成服务端代码
-s        generate stub and skeleton functions with strict XML validation checks
-T        generate server auto-test source code
-t        generate source code for fully xsi:type typed SOAP/XML messages
-u        uncomment WSDL/schema output by suppressing XML comments
-V        display the current version and exit
-v        verbose output
-w        don't generate WSDL and schema files
-x        don't generate sample XML message files                       不要生成xml消息文件
-y        include C/C++ type access information in sample XML messages
-z1       compatibility: generate old-style C++ service proxies and objects
-z2       compatibility with 2.7.x: omit XML output for NULL pointers
-z3       compatibility up to 2.8.30: _param_N indexing and nillable pointers 


4.2、soapcpp2生成的文件
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	projects/myH.h serialization functions, this file should be included in projects.
	projects/myC.c serialization functions
	projects/myClient.c client call stub functions
	projects/myServer.c server request dispatcher
	projects/myStub.h annotated copy of the source interface header file(用户需实现的接口的头文件)
	projects/ns.nsmap namespace table, this file should be included or used in projects.
	projects/ns.wsdl WSDL with Web service definitions
	projects/ns.xsd XML schema


	stdsoap2.cpp
	stdsoap2.h

4.2.1、文件轮转流程：
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	接收消息线程->myServer.c(消息处理)->myC.c(序列化)->自己实现(返回消息填充)

4.2.2、*Stub.h文件
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa


4.3、我所使用的soapcpp2命令
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
soapcpp2 -2 -c -L -S -x onvif.h -I /usr/local/share/gsoap

soap12.h(54): *WARNING*: option -1 or -2 overrides SOAP-ENV namespace
soap12.h(55): *WARNING*: option -1 or -2 overrides SOAP-ENC namespace

如果不加-I选项，因为typemap.dat被定制过，所以会报以下错误：
Critical error: #import: Cannot open file "custom/duration.h" for reading.

5、gsoap与Hilinux
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
编译onvif服务端程序时报链接错误：
./onvif/stdsoap2.o: In function `soap_done':
stdsoap2.c:(.text+0xbf6c): undefined reference to `freelocale'
./onvif/stdsoap2.o: In function `soap_float2s':
stdsoap2.c:(.text+0x20ef4): undefined reference to `newlocale'
stdsoap2.c:(.text+0x20f18): undefined reference to `uselocale'
stdsoap2.c:(.text+0x20f5c): undefined reference to `uselocale'
./onvif/stdsoap2.o: In function `soap_s2float':
stdsoap2.c:(.text+0x21168): undefined reference to `newlocale'
stdsoap2.c:(.text+0x21198): undefined reference to `strtod_l'
./onvif/stdsoap2.o: In function `soap_double2s':
stdsoap2.c:(.text+0x21804): undefined reference to `newlocale'
stdsoap2.c:(.text+0x21828): undefined reference to `uselocale'
stdsoap2.c:(.text+0x2185c): undefined reference to `uselocale'
./onvif/stdsoap2.o: In function `soap_s2double':
stdsoap2.c:(.text+0x21a74): undefined reference to `newlocale'
stdsoap2.c:(.text+0x21aa4): undefined reference to `strtod_l'
collect2: error: ld returned 1 exit status
makefile:49: recipe for target 'ipc_save_src' failed
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	看上去是Hilinux上没有这些API，那为什么没有避开这些API呢？因为我没有包含
config.h。但即使包含了也没用，因为我的configure是针对PC环境做的检查，wsdl2h、
soapcpp2两个工具也是在PC环境下生成的。

	我是这样考虑的：针对PC完成一次流程后，再针对交叉编译链configure一下，但不make。
只使用configure生成的config.h。

	具体来看：
5.1、config.h如何生效
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
在stdsoap2.h文件中有
stdsoap2.h文件中有：
#ifdef HAVE_CONFIG_H
# include "config.h"
#else
...

即要使config.h生效，我们需定义“HAVE_CONFIG_H”宏。

5.2、针对交叉链的configure命令格式
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	./configure --prefix=/opt/crossinstall --host=arm-hisiv300-linux CC=arm-hisiv300-linux-gcc CXX=arm-hisiv300-linux-g++

5.3、freelocale的控制宏在交叉链环境中会消失吗？
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	通过查看针对PC-linux环境生成的config.h文件，我们发现控制freelocale函数的宏是：
/* Define to 1 if you have the `newlocale' function. */
#define HAVE_NEWLOCALE 1

	我们查看针对交叉链configure日志，发现：
checking for newlocale... no
checking for uselocale... no
checking for freelocale... no

	查看生成的config.h，发现其中HAVE_NEWLOCALE宏的定义被注释掉了。

5.4、在工程中引入config.h
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	把针对交叉链的config.h拷贝到我们的工程中去，并在Makefile中定义HAVE_CONFIG_H宏

5.5、结论
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	结论就是：实践证明，这样做完全没有卵用，还是需要开发者手动参与。原因有两个：
1）configure认为Hi-linux没有malloc函数，在config.h中不定义HAVE_MALLOC宏且定义
#define malloc rpl_malloc，但实际Hi-linux是有malloc函数的，而rpl_malloc需要开发者
自己实现。

2）configure检查了
checking locale.h usability... yes
checking locale.h presence... yes
checking for locale.h... yes
checking xlocale.h usability... no
checking xlocale.h presence... no
checking for xlocale.h... no
checking for newlocale... no
checking for uselocale... no
checking for freelocale... no
checking for enable xlocale usage in library... no
checking for disable c locale usage in library... no
检查的很全面，但遗憾的是stdsoap2.h只使用了HAVE_LOCALE_H宏进行判断。

	综上，针对交叉链生成config.h后应对config.h进行手动修改,添加HAVE_MALLOC的定义，
注销rpl_malloc的定义（移植内存池后把这两项再改回来），注销HAVE_LOCALE_H的定义:

#define HAVE_MALLOC 1
//#define malloc rpl_malloc

/*#undef HAVE_LOCALE_H */

6、其它乱七八糟
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
https://blog.csdn.net/qq_18854309/article/details/76737948
:./soapcpp2 -s -2 onvif.h -x -I../gsoap-2.8/gsoap -I ../gsoap-2.8/gsop/import/ -I ../gsoap-2.8/gsoap/plugin -I../gsoap-2.8/gsoap/custom


import也很重要，诸如xsd_duration的定义就是通过import引入的。
https://bbs.csdn.net/topics/390117550


99、WS-Discovery Setup
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
https://www.genivia.com/doc/wsdd/html/wsdd_0.html
	如果需要使用gsoap的WSDD库，需引入wsddapi.c wsaapi.c

100、使用gsoap生成onvif框架总结：
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
100.1、gsoap安装：
	参照1、2、3

100.2、定制typemap.dat
	把xsd__duration = #import "custom/duration.h" | xsd__duration的注释去掉

100.3、下载onvif的wsdl文件
	从https://www.onvif.org/profiles/specifications/上下载下列文件：
	devicemgmt.wsdl
	event.wsdl
	onvif.xsd
	common.xsd
	remotediscovery.wsdl (页面上没有，因为这不是onvif的原创内容)
	media.wsdl
	imaging.wsdl
	ptz.wsdl

100.4、使用wsdl2h生成onvif.h
	wsdl2h  -c -o ./onvif.h ./*.wsdl

100.5、使用soapcpp2生成onvif框架
	soapcpp2 -2 -c -L -S -x onvif.h -I /usr/local/share/gsoap

100.6、生成、修改config.h并将它加入到交叉编译环境中去
	使用./configure --prefix=/opt/crossinstall --host=arm-hisiv300-linux 
CC=arm-hisiv300-linux-gcc CXX=arm-hisiv300-linux-g++针对交叉链生成config.h

aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	config.h文件中定义了一些宏，可以更好的控制onvif程序的工作。config.h是通过
configure检查系统配置产生的。我们是在交叉编译机器上编译gsoap的，所以configure检查
的是我们的编译机器，而不是嵌入式机器，所以需要略微修改后才能使用。即使我们针对交叉
编译链做configure检查，生成的config.h也不能直接使用。

主要修改：
1) 系统函数（malloc函数是有的，不知为什么没检测到）
	#define HAVE_MALLOC 0 -> #define HAVE_MALLOC 1
	#define malloc rpl_malloc -> //#define malloc rpl_malloc

1) 若干移植库
	openssl已移植，zlib还未移植，所以取消HAVE_OPENSSL_SSL_H的注释

2) 要使用内存池(是否能生效)，在config.h中增加两行：
#define malloc nedmalloc
#define free   nedfree

config.h加入到工程中去：
	Debug\onvif\subdir.mk中加入一行"DEFS += -DHAVE_CONFIG_H"，好像没什么用，
直接在stdsoap2.h第226行加入“#define HAVE_CONFIG_H 1”


100.7、把wsdd.nsmap拷贝到工程中去，并include它




