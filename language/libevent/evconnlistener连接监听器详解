0、参考文献
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
https://blog.csdn.net/zhouyongku/article/details/53439385


1、简介：
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	这个功能是libevent2.0.2-alpha版本中开始出现的。

	在这项功能出现之前：
1）我们需要自己手动调用socket、bind、listen函数来创建一个监听套接字。
2）然后调用evutil_make_socket_nonblocking函数把套接字设置为非阻塞模式；
3）然后通过event_new函数创建一个“struct event”变量并把套接字设置给它；
4）然后通过event_add函数把事件加入到“struct event_base”变量中去。非常繁琐！

	现在，就像bufferevent包装事件和工作套接字一样，出现了evconnlistener用于包装事件和
监听套接字。一步就能完成上面的四步动作，帅气！

	监听单独有个包装，那连接有没有呢？连接是没有单独包装的，因为连接也属于工作套接字的范围，
bufferevent提供了bufferevent_socket_connect函数，且bufferevent_socket_new具有延后绑定
套接字的功能。


2、创建或释放一个evconnlistener
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
struct evconnlistener* evconnlistener_new(struct event_base * base,
			evconnlistener_cb cb, 
			void* ptr, 
			unsigned flags, 
			int backlog,
			evutil_socket_t fd);
struct evconnlistener* evconnlistener_new_bind(struct event_base * base,
			evconnlistener_cb cb, 
			void* ptr, 
			unsigned flags, 
			int backlog,
			const struct sockaddr* sa, 
			int socklen);
void evconnlistener_free(struct evconnlistener* lev);

aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	两个evconnlistener_new*函数都分配和返回一个新的连接监听器对象。连接监听器使用event_base
来得知什么时候在给定的监听套接字上有新的TCP连接，新连接到达时，监听器调用你给出的回调函数。

	两个函数中，base参数都是监听器用于监听连接的event_base。cb是收到新连接时要调用的回
调函数；如果cb为NULL，则监听器是禁用的，直到设置了回调函数为止。ptr指针将传递给回调函数。
flags参数控制回调函数的行为，下面会更详细论述。backlog是任何时刻网络栈允许处于还未接受状
态的最大未决连接数，更多细节请查看系统的listen()函数文档，如果backlog是负的，libevent会
试图挑选一个较好的值；如果为0，libevent认为已经对提供的套接字调用了listen().

	两个函数的不同在于如何建立监听套接字。evconnlistener_new()函数假定已经将套接字绑定
到要监听的端口，然后通过fd传入这个套接字。如果要libevent分配和绑定套接字，可以调用
evconnlistener_new_bind()，传输要绑定到的地址和地址长度。

	可以看到，我们如果使用evconnlistener_new()，其实只省略了evconnlistener出现之前的
第3、4步(见本篇简介)，第1、2步还是要自己做，尤其是第二步，即设置非阻塞模式千万不忘忘记，
不然会导致一些无法预知的行为发生。所以如果没有特殊需求，我们应选择evconnlistener_new_bind
函数。

	要释放连接监听器，应调用evconnlistener_free()。

3、evconnlistener_new函数flags参数(标志)
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
LEV_OPT_LEAVE_SOCKETS_BLOCKING:
	默认情况下，连接监听器接收新套接字后，会将其设置为非阻塞的，以便将其用于libevent。
如果不想要这种行为，可以设置这个标志。

	这个标志很奇怪，前面说到evconnlistener需要套接字是非阻塞的，这里取消了会不会出现不
可预测的行为呢？

LEV_OPT_CLOSE_ON_FREE:
	如果设置了这个选项，释放连接监听器会关闭底层套接字。

LEV_OPT_CLOSE_ON_EXEC:
	如果设置了这个选项，连接监听器会为底层套接字设置close-on-exec标志。更多信息请查看
fcntl和FD_CLOEXEC的平台文档。

LEV_OPT_REUSEABLE:
	某些平台在默认情况下，关闭某监听套接字后，要过一会儿其他套接字才可以绑定到同一个端
口。设置这个标志会让libevent标记套接字是可重用的，这样一旦关闭，可以立即打开其他套接字，
在相同端口进行监听。

LEV_OPT_THREADSAFE:
	为监听器分配锁，这样就可以在多个线程中安全地使用了。这是2.0.8-rc的新功能。

4、连接监听器的回调
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
typedef void (*evconnlistener_cb)(struct evconnlistener *listener, 
			evutil_socket_t sock, 
			struct sockaddr *addr, 
			int len, 
			void *ptr);

	当一个新的连接到来，提供的回调函数将会被调用。参数解释如下：
		listener是用于接受连接的连接监听器；
		sock是新的socket；
		addr和len分别是接受的连接地址和地址的长度；
		ptr是传到evconnlistener_new()的用户提供的指针。

5、检查错误回调函数
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
typedef void(*evconnlistener_errorcb)(struct evconnlistener* lis, void * ptr);
void evconnlistener_set_error_cb(struct evconnlistener* lev,
					evconnlistener_errorcb errorcb);

	可以调用evconnlistener_set_error_cb()函数为监听器设置一个错误回调函数，每次监听
器出现错误的时候该函数都会返回。该函数接收监听器作为其第一个参数，传递到evconnlistener_new()
接口的参数ptr作为其第二个参数。

	函数首次出现在LibEvent2.0.8-rc版本中.

6、暂时启用和禁用evconnlistener
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
int evconnlistener_disable(struct evconnlistener* lev);
int evconnlistener_enable(struct evconnlistener* lev);

7、调整evconnlistener的回调函数
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
void evconnlistener_set_cb(struct evconnlistener* lev,
		evconnlistener_cb cb, 
		void* arg);

	该函数调整已有evconnlistener的回调函数和回调函数参数。该函数出现在LibEvent2.0.9-rc
版本中。

8、检查evconnlistener
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
evutil_socket_t evconnlistener_get_fd(struct evconnlistener* lev);
struct event_base* evconnlistener_get_base(struct evconnlistener * lev);

	这些函数分别返回了监听器关联的socket和event_base。
	evconnlistener_get_fd()函数出现在LibEvent2.0.3-alpha版本中。

9、evconnlistener的使用范例
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
#include <event2/listener.h>
#include <event2/bufferevent.h>
#include <event2/buffer.h>
#include <arpa/inet.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
static void echo_read_cb(struct bufferevent* bev, void * ctx)
{
	/* This callback is invoked when there is data to read on bev.*/
	struct evbuffer* input = bufferevent_get_input(bev);
	struct evbuffer* output = bufferevent_get_output(bev);
	/* Copy all the data from the input buffer to the output buffer.*/
	evbuffer_add_buffer(output, input);
}
static void echo_event_cb(struct bufferevent* bev, short events, void * ctx)
{
	if (events & BEV_EVENT_ERROR)
		perror("Error from bufferevent");
	if (events & (BEV_EVENT_EOF | BEV_EVENT_ERROR)) 
	{
		bufferevent_free(bev);
	}
}
static voidaccept_conn_cb(struct evconnlistener* listener,
			evutil_socket_t fd, 
			struct sockaddr* address, 
			int socklen,
			void* ctx)
{
	/* We got a new connection! Set up a bufferevent for it.*/
	struct event_base* base = evconnlistener_get_base(listener);
	struct bufferevent* bev = bufferevent_socket_new(
			base, fd, BEV_OPT_CLOSE_ON_FREE);
	bufferevent_setcb(bev, echo_read_cb, NULL, echo_event_cb, NULL);
	bufferevent_enable(bev, EV_READ|EV_WRITE);
}
static void accept_error_cb(struct evconnlistener* listener, void * ctx)
{
	struct event_base* base = evconnlistener_get_base(listener);
	int err = EVUTIL_SOCKET_ERROR();
	fprintf(stderr, "Got an error %d (%s) on the listener. "
		"Shutting down.\n", err, evutil_socket_error_to_string(err));
	event_base_loopexit(base, NULL);
}
int main(int argc, char** argv)
{
	struct event_base* base;
	struct evconnlistener* listener;
	struct sockaddr_in sin;
	int port = 9876;
	if (argc > 1) 
	{
		port = atoi(argv[1]);
	}
	if (port<=0 || port>65535) 
	{
		puts("Invalid port");
		return 1;
	}
	base = event_base_new();
	if (!base) 
	{
		puts("Couldn’t open event base");
		return 1;
	}
	/* Clear the sockaddr before using it, in case there are extra*
	platform-specific fields that can mess us up.*/
	memset(&sin, 0, sizeof(sin));
	/* This is an INET address*/
	sin.sin_family = AF_INET;
	/* Listen on 0.0.0.0*/
	sin.sin_addr.s_addr = htonl(0);
	/* Listen on the given port.*/
	sin.sin_port = htons(port);
	listener = evconnlistener_new_bind(base, accept_conn_cb, NULL,
				LEV_OPT_CLOSE_ON_FREE|LEV_OPT_REUSEABLE, -1,
				(struct sockaddr * )&sin, sizeof(sin));
	if (!listener) 
	{
		perror("Couldn’t create listener");
		return 1;
	}
	evconnlistener_set_error_cb(listener, accept_error_cb);
	event_base_dispatch(base);
	return 0;
}