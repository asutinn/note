1、简介
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	变基，直观的理解就是：把提交从当前的父提交后面移走，接到其它提交的后面。

2、语法
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
git rebase [-i | --interactive] [<options>] [--exec <cmd>]
        [--onto <newbase> | --keep-base] [<upstream> [<branch>]]
git rebase [-i | --interactive] [<options>] [--exec <cmd>] [--onto <newbase>]
        --root [<branch>]
git rebase (--continue | --skip | --abort | --quit | --edit-todo | --show-current-patch)

3、变基的原理
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	变基的内部原理其实包含两个步骤：
		1)生成补丁存于临时文件文件中
		2)应用补丁

	因为变基过程分两步走，这就可以生成一些变数。具体来说分为两分支和三分支情况：
两个分支生成补丁，譬如A分支针对B分支打补丁，如果这个补丁可以应用到B分支上，也可
以应用到C分支上

三个示例：
	git rebase B
	git rebase B A
	git rebase B A --onto C

	upstream一般是要指定的，不然git回去配置文件中寻找；branch可以不指定，默认是
当前分支，如果指定，git会先执行"git checkout A"指令；如果指定了“--onto newbase”
补丁会应用到第三分支上，而不是upstream上。

	变基时，B..A有几个提交，就会在B或C上生成几个新的提交。


4、变基的风险，使用原则
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	呃，奇妙的变基也并非完美无缺，要用它得遵守一条准则：如果提交存在于你的仓库
之外，而别人可能基于这些提交进行开发，那么不要执行变基。如果你遵循这条金科玉律，
就不会出差错。否则，人民群众会仇恨你，你的朋友和家人也会嘲笑你，唾弃你。


5、使用场景
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	1、希望我们的版本库只有开放性分叉（即分支），没有闭合性分叉（一般分支merge
会造成闭合性分叉）。换句话说git-rebase的结果比git-merge的结果更直观。

	2、当我们开发一个功能时，可能会在本地有无数次commit，而你实际上在你的master
分支上只想显示每一个功能测试完成后的一次完整提交记录就好了，其他的提交记录并不想
将来全部保留在你的master分支上，那么rebase将会是一个好的选择，他可以在rebase时将
本地多次的commit合并成一个commit，还可以修改commit的描述等。

6、git-merge与git-rebase简单比较
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	git merge 操作合并分支会让两个分支的每一次提交都按照提交时间（并不是push时
间）排序，并且会将两个分支的最新一次commit点进行合并成一个新的commit，最终的分支
树呈现非整条线性直线的形式

	git rebase操作实际上是将当前执行rebase分支的所有基于原分支提交点之后的commit
打散成一个一个的patch，并重新生成一个新的commit hash值，再次基于原分支目前最新的
commit点上进行提交，并不根据两个分支上实际的每次提交的时间点排序，rebase完成后，
切到基分支进行合并另一个分支时也不会生成一个新的commit点，可以保持整个分支树的完
美线性。

7、术语、语法、选项解释
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	如果git-rebase后面加上了参数<branch>，那么 git-rebase会在任何其他动作之前先
执行git checkout <branch>，如果没有加参数<branch>，那么git-rebase会针对当前分支
来做动作。

	git-rebase命令主要用在从上游分支获取最新commit信息，并有机的将当前分支和上游
分支进行合并。那什么是上游分支呢(upstream)，举例来说：假设主分支为master，在开发
过程中生成一个新分支topic。master称为topic的上游分支。



