1、TTF_RenderUTF8_Solid()
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
原型：
SDL_Surface *TTF_RenderUTF8_Solid(TTF_Font *font, 
									const char *text, 
									SDL_Color fg);

参数：
font   Font to render the text with. A NULL pointer is not checked. 
text   The UTF8 null terminated string to render. 
fg     The color to render the text in. This becomes colormap index 1. 

说明：
Render the UTF8 encoded text using font with fg color onto a new surface, using 
the Solid mode (see section Solid). The caller (you!) is responsible for freeing 
any returned surface.

NOTE: Passing a NULL font into this function will cause a segfault.
NOTE: Passing a NULL text into this function will result in undefined behavior.

Returns: a pointer to a new SDL_Surface. NULL is returned on errors.


Solid
    Quick and Dirty
    Create an 8-bit palettized surface and render the given text at fast quality with the given font and color. The pixel value of 0 is the colorkey, giving a transparent background when blitted. Pixel and colormap value 1 is set to the text foreground color. This allows you to change the color without having to render the text again. Palette index 0 is of course not drawn when blitted to another surface, since it is the colorkey, and thus transparent, though its actual color is 255 minus each of the RGB components of the foreground color. This is the fastest rendering speed of all the rendering modes. This results in no box around the text, but the text is not as smooth. The resulting surface should blit faster than the Blended one. Use this mode for FPS and other fast changing updating text displays. 












1、SDL_SetColorKey
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
原型：
int SDL_SetColorKey(SDL_Surface* surface,
					int          flag,
					Uint32       key)

参数：
surface  the SDL_Surface structure to update
flag     SDL_TRUE to enable color key, SDL_FALSE to disable color key
key      the transparent pixel

说明：
The color key defines a pixel value that will be treated as transparent in a blit. It is a pixel of the format used by the surface, as generated by SDL_MapRGB().

RLE acceleration can substantially speed up blitting of images with large horizontal runs of transparent pixels. See SDL_SetSurfaceRLE() for details. 




Uint32            flags        (internal use)
SDL_PixelFormat*  format       the format of the pixels stored in the surface; see 
                               SDL_PixelFormat for details (read-only)
int               w, h         the width and height in pixels (read-only)
int               pitch        the length of a row of pixels in bytes (read-only)
void*             pixels       the pointer to the actual pixel data; see Remarks for details (read-write)
void*             userdata     an arbitrary pointer you can set (read-write)
int               locked       used for surfaces that require locking (internal use)
void*             lock_data    used for surfaces that require locking (internal use)
SDL_Rect          clip_rect    an SDL_Rect structure used to clip blits to the surface 
                               which can be set by SDL_SetClipRect() (read-only)
SDL_BlitMap*      map          info for fast blit mapping to other surfaces (internal use)
int               refcount     reference count that can be incremented by the application

SDL_PixelFormat类型
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
Uint32            format        one of the SDL_PixelFormatEnum values
SDL_Palette*      palette       an SDL_Palette structure associated with this pixel format, or NULL 
                                if the format doesn't have a palette
Uint8             BitsPerPixel  the number of significant bits in a pixel value, eg: 8, 15, 16, 24, 32
Uint8             BytesPerPixel the number of bytes required to hold a pixel value, eg: 1, 2, 3, 4; 
                                see Remarks for related data type
Uint32            Rmask         a mask representing the location of the red component of the pixel
Uint32            Gmask         a mask representing the location of the green component of the pixel
Uint32            Bmask         a mask representing the location of the blue component of the pixel
Uint32            Amask         a mask representing the location of the alpha component of the pixel 
                                or 0 if the pixel format doesn't have any alpha information
Uint8             Rloss         (internal use)
Uint8             Gloss         (internal use)
Uint8             Bloss         (internal use)
Uint8             Aloss         (internal use)
Uint8             Rshift        (internal use)
Uint8             Gshift        (internal use)
Uint8             Bshift        (internal use)
Uint8             Ashift        (internal use)
int               refcount      (internal use)
SDL_PixelFormat*  next          (internal use)




SDL_PIXELTYPE(format)



https://www.imooc.com/article/25379
