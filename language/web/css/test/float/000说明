float属性可能的四个值
	left    元素向左浮动
	right   元素向右浮动
	none    默认值。元素不浮动，并会显示在其在文本中出现的位置
	inherit 规定应该从父元素继承float属性的值

	在CSS中，任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元
素。
	我们以left为例，当框向左浮动时，它脱离文档流并且向左移动，直到它的左边缘碰到
包含框的左边缘或其它浮动框的右边缘，如果一行内已不能排列更多浮动框，则从新的行开
始，新行已前一个框的下边界为界，也就是说如果前一个框比前前一个框要矮，那右界从前
前框的右边缘开始。因为它不再处于文档流中，所以它不占据文档空间，实际上它会覆盖文
档元素，见002.html。


	clear属性定义了元素的哪边上不允许出现浮动元素。在CSS1和CSS2中，这是通过自动
为清除元素（即设置了clear属性的元素）增加上外边距实现的。在CSS2.1中，会在元素上
外边距之上增加清除空间，而外边距本身并不改变。不论哪一种改变，最终结果都一样，
如果声明为左边或右边清除，会使元素的上外边框边界刚好在该边上浮动元素的下外边距边
界之下。

	left      在左侧不允许浮动元素。
	right     在右侧不允许浮动元素。
	both      在左右两侧均不允许浮动元素。
	none      默认值。允许浮动元素出现在两侧。
	inherit   规定应该从父元素继承 clear 属性的值。


002.html
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	一个包含框下有一个向左浮动框、一个正常文档框。我们可以看到向左浮动框以包含框
为界进行浮动，并覆盖了部分正常文档框，但正常文档框的文字并没有被覆盖，而是环绕在
浮动框的

003.html
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	元素使用了clear之后，可以保证元素框不被浮动框覆盖。

	div1内的两个子div都向左浮动，脱离了正常文档流，导致div1不再占用文档空间，所以
绿框表现的像是一根绿线。

	div2内前两个子div向左浮动，第三个子div使用了clear属性，这时正常文档流中空出空出
div1中、div2中共四个浮动框的位置，然后安排div2的第三个子div（空白），div2框从绿线
下开始，到包含住div2的第三个子div结束，视觉上div2框包含了4个浮动框，但其实这是两个
图层叠加的结果，如果我们仔细看会发现红色浮动框覆盖了部分蓝色div2框。我们还可以尝试把
clear框让在第一位或第二位，看看会发生什么情况。

	div3的情况就更有趣了：我们在绝对定位框中浮动元素，这时好像出现了第三图层，绝对定
位和其中的浮动框都在这一层，也就是说：绝对定位框中的浮动并不以前4个浮动框为依据，而
只以绝对定位框的边界为定位依据。