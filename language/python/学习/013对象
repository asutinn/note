
python对象
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	Python里的所有数据都是以对象形式存在的，无论是简单的数字类型还是复杂的代码
模块。然而，Python特殊的语法形式巧妙地将实现对象机制的大量细节隐藏了起来。输入
num = 7就可以创建一个值为7的整数对象，并且将这个对象赋值给变量num。事实上，在
Python中，只有当你想要创建属于自己的对象或者需要修改已有对象的行为时，才需要关注
对象的内部实现细节。


类与对象
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
	把对象比作塑料盒子。类（class）则像是制作盒子用的模具。

类型与基类
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
我们谈及对象时，用两种关系来连接各种对象，使得对象之间产生联系：
	父子关系(the subclass-superclass relationship) 继承具有传递性
	类型实例关系(the type-instance relationship)   实例没有传递性吧？

两个是互为实例的关系，但不是互为子类的关系，只有type是object的子类，反之则不成立。

在python中，一切皆对象，所以类型也是对象。这些对象又分为两类：类型与非类型。

类型对象都是type对象/类的实例，包括type对象本身，非类型对象是类型类的实例

我们无法直接定义type的实例，只能定义type



父子关系的鼻祖是object，object对象是所有对象的

	type用于实例化，object用于继承
	在python中只要两种对象：类型和非类型。
	对象的类型可以通过type(对象)或对象.__class__来获取。object、type、class、int、string、
list、tuple、dict、set、class等对象的类型都是<class 'type'>
	类型对象的基类可以通过对象.__base__获取
	object的类型是type，type的基类是object

	isinstance()


https://www.cnblogs.com/crazyrunning/p/6945183.html

<type 'type'>和<type 'object'>分别是什么
